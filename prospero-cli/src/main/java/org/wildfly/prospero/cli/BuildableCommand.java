package org.wildfly.prospero.cli;

import org.wildfly.prospero.cli.commands.AbstractCommand;
import org.wildfly.prospero.stability.Stability;
import org.wildfly.prospero.stability.StabilityLevel;

import java.util.List;

/**
 * Interface for commands that can be built by StabilityAwareCommandBuilder.
 * This interface allows the builder to access subcommands without exposing
 * the internal structure of command implementations.
 *
 * <p>Commands implementing this interface will have their subcommands
 * automatically filtered based on stability levels during command line
 * construction.</p>
 *
 * <h3>Usage Example:</h3>
 * <pre>{@code
 * @CommandLine.Command(name = "my-command")
 * @StabilityLevel(level = Stability.Community)
 * public class MyCommand extends AbstractParentCommand implements BuildableCommand {
 *     private final List<AbstractCommand> subcommands;
 *
 *     public MyCommand() {
 *         this.subcommands = Arrays.asList(
 *             new MySubCommand1(),
 *             new MySubCommand2()
 *         );
 *     }
 *
 *     @Override
 *     public List<AbstractCommand> getSubcommands() {
 *         return subcommands;
 *     }
 * }
 * }</pre>
 *
 * <h3>Stability Level Filtering:</h3>
 * <p>Subcommands are automatically filtered based on:</p>
 * <ul>
 *   <li>Their {@link StabilityLevel} annotation</li>
 *   <li>The current distribution stability level</li>
 *   <li>Parent command inclusion (excluded parents exclude all children)</li>
 * </ul>
 *
 * Generated by Cursor
 * @see StabilityLevel
 * @see StabilityAwareCommandBuilder
 * @since 1.4.0
 */
public interface BuildableCommand {
    /**
     * Returns the list of subcommands for this command.
     *
     * <p>The returned list should be immutable or at least stable during
     * the lifetime of command line construction. Subcommands will be
     * automatically filtered based on their stability levels.</p>
     *
     * <p>If a subcommand has no {@link StabilityLevel}
     * annotation, it defaults to {@link Stability#Default}.</p>
     *
     * @return immutable list of subcommands, never null
     * @throws IllegalStateException if subcommands cannot be determined
     */
    List<AbstractCommand> getSubcommands();
}