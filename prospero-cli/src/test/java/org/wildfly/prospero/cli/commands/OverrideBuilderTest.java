package org.wildfly.prospero.cli.commands;

import org.junit.Test;
import org.wildfly.channel.Channel;
import org.wildfly.prospero.cli.ArgumentParsingException;
import org.wildfly.prospero.cli.CliMessages;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

// Generated by Cursor
public class OverrideBuilderTest {

    private static final Channel TEST_CHANNEL = new Channel.Builder()
            .setName("test-channel")
            .setManifestCoordinate("org.test", "test-manifest", "1.0.0")
            .build();

    private static final Channel TEST_CHANNEL_2 = new Channel.Builder()
            .setName("test-channel-2")
            .setManifestCoordinate("org.test", "test-manifest-2", "2.0.0")
            .build();

    @Test
    public void buildsOverrideChannelsWithValidVersions() throws Exception {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("test-channel::1.2.3");

        List<Channel> result = OverrideBuilder.from(channels)
                .withManifestVersions(versions)
                .build();

        assertThat(result).hasSize(1);
        assertEquals("1.2.3", result.get(0).getManifestCoordinate().getVersion());
    }

    @Test
    public void throwsExceptionForMissingDelimiter() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("test-channel1.2.3");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideMissingDelimiter("test-channel1.2.3").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForTooManyDelimiters() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("test-channel::1.2.3::extra");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideTooManyDelimiters("test-channel::1.2.3::extra").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForEmptyChannelName() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("::1.2.3");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideEmptyChannel("::1.2.3").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForEmptyVersion() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("test-channel::");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideEmptyVersion("test-channel::").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForWhitespaceOnlyChannelName() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("   ::1.2.3");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideEmptyChannel("   ::1.2.3").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForWhitespaceOnlyVersion() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("test-channel::   ");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.invalidVersionOverrideEmptyVersion("test-channel::   ").getMessage(),
                exception.getMessage());
    }

    @Test
    public void trimsWhitespaceAroundValidValues() throws Exception {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("  test-channel  ::  1.2.3  ");

        List<Channel> result = OverrideBuilder.from(channels)
                .withManifestVersions(versions)
                .build();

        assertThat(result).hasSize(1);
        assertEquals("1.2.3", result.get(0).getManifestCoordinate().getVersion());
    }

    @Test
    public void throwsExceptionForDuplicateChannelOverrides() {
        List<Channel> channels = List.of(TEST_CHANNEL, TEST_CHANNEL_2);
        List<String> versions = List.of("test-channel::1.2.3", "test-channel::1.2.4", "test-channel-2::2.0.1");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.duplicatedVersionOverride("test-channel").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionForNonExistentChannel() {
        List<Channel> channels = List.of(TEST_CHANNEL);
        List<String> versions = List.of("non-existent-channel::1.2.3");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.channelNotFoundException("non-existent-channel").getMessage(),
                exception.getMessage());
    }

    @Test
    public void throwsExceptionWhenNotAllChannelsSpecified() {
        List<Channel> channels = List.of(TEST_CHANNEL, TEST_CHANNEL_2);
        List<String> versions = List.of("test-channel::1.2.3");

        OverrideBuilder builder = OverrideBuilder.from(channels)
                .withManifestVersions(versions);

        ArgumentParsingException exception = assertThrows(ArgumentParsingException.class, builder::build);
        assertEquals(CliMessages.MESSAGES.versionOverrideHasToApplyToAllChannels().getMessage(),
                exception.getMessage());
    }

    @Test
    public void buildsOverrideChannelsWithMultipleValidVersions() throws Exception {
        List<Channel> channels = List.of(TEST_CHANNEL, TEST_CHANNEL_2);
        List<String> versions = List.of("test-channel::1.2.3", "test-channel-2::2.0.1");

        List<Channel> result = OverrideBuilder.from(channels)
                .withManifestVersions(versions)
                .build();

        assertThat(result).hasSize(2);

        Channel channel1 = result.stream().filter(c -> "test-channel".equals(c.getName())).findFirst().orElse(null);
        assertThat(channel1).isNotNull();
        assertEquals("1.2.3", channel1.getManifestCoordinate().getVersion());

        Channel channel2 = result.stream().filter(c -> "test-channel-2".equals(c.getName())).findFirst().orElse(null);
        assertThat(channel2).isNotNull();
        assertEquals("2.0.1", channel2.getManifestCoordinate().getVersion());
    }

    @Test
    public void returnsEmptyListWhenNoVersionsAndNoRepositories() throws Exception {
        List<Channel> channels = List.of(TEST_CHANNEL);

        List<Channel> result = OverrideBuilder.from(channels)
                .build();

        assertThat(result).isEmpty();
    }
}